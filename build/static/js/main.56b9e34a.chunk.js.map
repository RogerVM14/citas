{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","localStorage","getItem","citas","setCitas","useEffect","setItem","JSON","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56b9e34a.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({ crearCita }) => {\n\n    //Crear State de citas\n    const [cita, setCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n\n    const [error, setError] = useState(false)\n\n    //Funcion que se ejecuta cada que el usuario escribe en un input\n\n    const handleChange = (e) => {\n        //console.log(e.target.name)\n        setCita({\n            ...cita,  //Este wey es el de la magia !!!!\n            [e.target.name]: e.target.value\n        })\n    }\n    //Extraer los valores de cita\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n    //cuando el usuario presione el bot칩n de crear cita\n\n    const submitCita = (e) => {\n        e.preventDefault();\n        //Validar\n\n        if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\n            setError(true)\n            return;\n        }\n\n        //Elminar mensaje previo\n        if (error) {\n            setError(false)\n        }\n\n        //Asignar un ID\n        cita.id = uuidv4();\n\n        //Crear la cita\n        crearCita(cita);\n\n        //Reiniciar el form\n        setCita({\n\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n\n        });\n    }\n\n\n\n    return (\n\n        <Fragment>\n            <h2> Crear cita </h2>\n            {\n                error\n                    ? <p className=\"alerta-error\"> Todos los campos son obligatorios</p>\n                    : null\n            }\n\n            <form\n                onSubmit={submitCita}\n            >\n                <label> Nombre Mascota </label>\n\n                <input\n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Mascota\"\n                    onChange={handleChange}\n                    value={mascota}\n                />\n\n                <label> Nombre del due침o </label>\n\n                <input\n                    type=\"text\"\n                    name=\"propietario\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre due침o de la mascota\"\n                    onChange={handleChange}\n                    value={propietario}\n                />\n\n                <label> Fecha </label>\n\n                <input\n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={handleChange}\n                    value={fecha}\n                />\n\n                <label> Hora </label>\n\n                <input\n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={handleChange}\n                    value={hora}\n                />\n\n                <label> Sintomas </label>\n\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={handleChange}\n                    value={sintomas}\n                >\n\n                </textarea>\n\n\n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >\n                    Agregar Cita\n                </button>\n\n            </form>\n        </Fragment>\n\n    );\n};\n\n\nFormulario.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({cita, eliminarCita}) => (\n    <div className=\"cita\">\n        <p> Mascota: <span>{cita.mascota} </span></p>\n        <p> Due침o: <span>{cita.propietario} </span></p>\n        <p> Fecha: <span>{cita.fecha} </span></p>\n        <p> Hora: <span>{cita.hora} </span></p>\n        <p> Sintomas: <span>{cita.sintomas} </span></p>\n\n        <button\n            className=\"button eliminar u-full-width\"\n            onClick={()=>eliminarCita(cita.id)}\n        >\n        Eliminar &times;</button>\n    </div>\n);\n\nCita.propTypes = {\n    cita: PropTypes.object.isRequired,\n    eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\n\nfunction App() {\n\n  //Citas en localStorage\n\n  let citasIniciales = localStorage.getItem('cita');\n\n  if (!citasIniciales) {\n    citasIniciales = []\n  }\n\n  //Arreglo de citas\n  const [citas, setCitas] = useState(citasIniciales);\n\n  //Use Effect para realizar ciertas operaciones cuando el state cambia\n\n  useEffect(() => {\n\n\n    let citasIniciales = localStorage.getItem('cita');\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  //Funcion que tome las citas actuales y agregue la nueva\n\n  const crearCita = cita => {\n\n    setCitas([\n      ...citas,\n      cita\n    ])\n\n  }\n\n\n  //Funcion que eliminar una cita por su id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevasCitas);\n  }\n\n\n  const titulo = citas.length > 0 ? 'Administra tus citas' : 'No hay citas'\n\n  return (\n    <Fragment>\n      <div className=\"App\">\n\n        <h1> Administrador de Pacientes</h1>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"one-half column\">\n              <Formulario\n                crearCita={crearCita}\n              />\n            </div>\n            <div className=\"one-half column\">\n              <h1> {titulo} </h1>\n              {\n                citas.map(cita => (\n                  <Cita\n                    key={cita.id}\n                    cita={cita}\n                    eliminarCita={eliminarCita}\n                  />\n                ))\n              }\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}